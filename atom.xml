<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Mushroom's blog]]></title>
  <subtitle><![CDATA[没时间玩，就扩大玩的定义，我玩的是技术]]></subtitle>
  <link href="http://lsmushroom.github.io/atom.xml" rel="self"/>
  <link href="http://lsmushroom.github.io"/>
  <updated>2014-01-26T11:13:45.433Z</updated>
  <id>http://lsmushroom.github.io/</id>
  <author>
    <name><![CDATA[Yuan Linsi]]></name>
    <email><![CDATA[lsmushroom@126.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[idle 进程]]></title>
    <link href="http://lsmushroom.github.io/2014/01/06/top-实现/"/>
    <id>http://lsmushroom.github.io/2014/01/06/top-实现/</id>
    <published>2014-01-06T06:43:18.000Z</published>
    <updated>2014-01-08T14:06:32.000Z</updated>
    <content type="html"><![CDATA[<p>心血来潮分析了下操作系统中的idle进程及动态时钟的相关的实现，简单记录下</p>
<a id="more"></a>

<p>动态时钟是在2.6.17版本中引入内核的，Kernel中与动态时钟相关的配置项为CONFIG_NO_HZ,其设计的初衷就是改变周期性时钟带来的消耗。<br>内核中周期性时钟中断主要用于更新进程时间片进而促发进程调度，也用于更新各个进程运行的统计计数等，而周期性时钟中断的问题在于其触发时钟中断时并不考虑当前系统中进程的运行状况，无论当前系统是空闲的运行的是idle进程还是真正处于繁忙状态都只是定时的周期性的触发时钟中断。</p>
<p>而动态时钟的主要思想是在在系统处于idle状态时主动关闭时钟中断，从而降低时钟中断频率达到减小系统能耗的目的，在有进程需要被调度运行时，将重新开启时钟中断。</p>
<p>但需要注意的是只有经典定时器需要考虑此用法，高分辨率定时器不绑定到时钟频率，也并非基于周期时钟实现。</p>
<p>以下源码为RHEL6 2.6.32版本内核源码的实现，idle进程实为操作系统的0号进程，其在系统启动后首先创建1号init进程，随后便调用cpu_idle()函数使自身成为idle进程，其相关实现如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre>void cpu_idle(void)
{
	current_thread_info()-&gt;status |= TS_POLLING;

	/*
	 * If we're the non-boot CPU, nothing set the stack canary up
	 * for us.  CPU0 already has it initialized but no harm in
	 * doing it again.  This is a good place for updating it, as
	 * we wont ever return from this function (so the invalid
	 * canaries already on the stack wont ever trigger).
	 */
	boot_init_stack_canary();

	/* endless idle loop with no priority at all */
	while (1) {
        //进入循环后即关闭系统的周期性时钟中断
		tick_nohz_stop_sched_tick(1);
        //退出以下循环的条件为当前系统中有进程需要被调度，否则将进程idle状态
		while (!need_resched()) {

			rmb();

			if (cpu_is_offline(smp_processor_id()))
				play_dead();
			/*
			 * Idle routines should keep interrupts disabled
			 * from here on, until they go to idle.
			 * Otherwise, idle callbacks can misfire.
			 */
			local_irq_disable();
			enter_idle();
			/* Don't trace irqs off for idle */
			stop_critical_timings();
			pm_idle();
			start_critical_timings();
			/* In many cases the interrupt that ended idle
			   has already called exit_idle. But some idle
			   loops can be woken up without interrupt. */
			__exit_idle();
		}

        //当有进程需要调度时，将重新开启周期性时钟中断
		tick_nohz_restart_sched_tick();
		preempt_enable_no_resched();
        //主动触发一次进程调度，当再次回到这里时，说明当前CPU的运行队列为空，idle进程再次被选中运行，进而再次进入循环
		schedule();
		preempt_disable();
	}
}
</pre></td></tr></table></figure>

<p>idle进程的主题逻辑十分清晰，而更让我好奇的是idle进程本身在多核系统启动期间的初始化过程。一番上下求索，逐步清晰其初始化的逻辑：</p>
<p>操作系统启动时将首先启动主CPU，在主CPU上调用start_kernel(),将通过调用sched_init对调度器做初始化,而sched_init()将调用init_idle（）来初始化当前CPU的调度队列的idle,详细如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>void __init sched_init(void)
{
    <span class="keyword">...</span>

    init_idle(current, smp_processor_id());

    /*
     * During early bootup we pretend to be a normal task:
     */
    current-&gt;sched_class = &fair_sched_class;

    <span class="keyword">...</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre>void __cpuinit init_idle(struct task_struct <span class="variable">*idle</span>, <span class="keyword">int</span> cpu)
{
	struct rq <span class="variable">*rq</span> = cpu_r<span class="string">q(cpu)</span>;
	unsigned long flags;

	spin_lock_irqsave(&rq-&gt;lock, flags);

	__sched_fork(idle);
	idle-&gt;state = TASK_RUNNING;
	idle-&gt;se.exec_start = sched_clock();

	cpumask_copy(&idle-&gt;cpus_allowed, cpumask_of(cpu));
	__set_task_cpu(idle, cpu);

    <span class="regexp">//</span>在此初始化当前CPU的调度队列的idle进程为当前进程
	rq-&gt;curr = rq-&gt;idle = idle;
<span class="comment">#if defined(CONFIG_SMP) && defined(__ARCH_WANT_UNLOCKED_CTXSW)</span>
	idle-&gt;oncpu = <span class="number">1</span>;
<span class="comment">#endif</span>
	spin_unlock_irqrestore(&rq-&gt;lock, flags);

	<span class="regexp">/* Set the preempt count _outside_ the spinlocks! */</span>
<span class="comment">#if defined(CONFIG_PREEMPT)</span>
	task_thread_info(idle)-&gt;preempt_count = (idle-&gt;lock_depth &gt;= <span class="number">0</span>);
<span class="comment">#else</span>
	task_thread_info(idle)-&gt;preempt_count = <span class="number">0</span>;
<span class="comment">#endif</span>
	/*
	 * The idle tasks have their own, simple scheduling class:
	 <span class="variable">*/</span>
	idle-&gt;sched_class = &idle_sched_class;
	ftrace_graph_init_task(idle);
}
</pre></td></tr></table></figure>

<p>在start_kernel()函数的最后将调用rest_init(),其中在创建完init进程后，将使当前进程进入idle进程的处理逻辑,当系统空闲时当前进程将作为idle进程被调度：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre>static noinline void __init_refok rest_init(void)
	__releases(kernel_lock)
{
	int pid;

	rcu_scheduler_starting();
	/*
	 * We need to spawn init first so that it obtains pid-1, however
	 * the init task will end up wanting to create kthreads, which, if
	 * we schedule it before we create kthreadd, will OOPS.
	 */
    //在此创建系统的init进程
	kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
	numa_default_policy();
	pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);
	kthreadd_task = find_task_by_pid_ns(pid, &init_pid_ns);
	complete(&kthreadd_done);
	unlock_kernel();

	/*
	 * The boot idle thread must execute schedule()
	 * at least once to get things moving:
	 */
    //至此，将当前系统启动进程的调度类切换为idle_sched_class调度类,随后让出CPU
	init_idle_bootup_task(current);
	preempt_enable_no_resched();
	schedule();
	preempt_disable();

	/* Call into cpu_idle with preempt disabled */
    //当再次回来时，在完成所有的初始化后将调用cpu_idle()函数，将自身作为主CPU的idle进程运行
	cpu_idle();
}
</pre></td></tr></table></figure>

<p>至此idle进程在主CPU上的初始化过程即完成，当系统空闲时，idle进程如何被选中的呢？<br>以上分析中可知系统的主CPU上的启动进程在最后将自己的调度类切换为idle_sched_class，并在最后调用cpu_idle(),使自身完全进入idle进程的处理逻辑,成为一个普通进程供调度器调度。idle_sched_class定义如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>static const struct sched_class idle_sched_class = {
    <span class="keyword">...</span>

	.pick_next_task		= pick_next_task_idle,

    <span class="keyword">...</span>
};
</pre></td></tr></table></figure>

<p>32内核中已引入调度类的概念，在每一次发生进程调度时，将以此遍历各个调度类，需找可被调度需要执行的进程，而idle_sched_class是最后的调度类，当其他的调度类中均没有可被调度的进程时，将由idle_sched_class提供idle进程供调度执行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="keyword">static</span> inline struct task_struct *
pick_next_task(struct rq *rq)
{
	<span class="keyword">const</span> struct sched_class *<span class="class"><span class="keyword">class</span>;
	<span class="title">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;

	/*
	 * <span class="title">Optimization</span>: <span class="title">we</span> <span class="title">know</span> <span class="title">that</span> <span class="title">if</span> <span class="title">all</span> <span class="title">tasks</span> <span class="title">are</span> <span class="title">in</span>
	 * <span class="title">the</span> <span class="title">fair</span> <span class="title">class</span> <span class="title">we</span> <span class="title">can</span> <span class="title">call</span> <span class="title">that</span> <span class="title">function</span> <span class="title">directly</span>:
	 */
	<span class="title">if</span> (<span class="title">likely</span>(<span class="title">rq</span>-&gt;<span class="title">nr_running</span> == <span class="title">rq</span>-&gt;<span class="title">cfs</span>.<span class="title">h_nr_running</span>)) {</span>
		p = fair_sched_class.pick_next_task(rq);
		<span class="keyword">if</span> (likely(p))
			<span class="keyword">return</span> p;
	}

    <span class="comment">//循环遍历各个调度类，调用每个调度类定义的pick_next_task()来返回各自调度类中可执行的进程</span>
	for_each_class(<span class="class"><span class="keyword">class</span>) {</span>
		p = <span class="class"><span class="keyword">class</span>-&gt;<span class="title">pick_next_task</span>(<span class="title">rq</span>);
		<span class="title">if</span> (<span class="title">p</span>)
			<span class="title">return</span> <span class="title">p</span>;
	}

	<span class="title">BUG</span>(); /* <span class="title">the</span> <span class="title">idle</span> <span class="title">class</span> <span class="title">will</span> <span class="title">always</span> <span class="title">have</span> <span class="title">a</span> <span class="title">runnable</span> <span class="title">task</span> */
}</span>
</pre></td></tr></table></figure>

<p>pick_next_task_idle的实现如下，简单的返回当前CPU对应的idle进程，而此值是在前文分析的系统启动时被初始化的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">static</span> <span class="keyword">struct</span> task_struct *pick_next_task_idle(<span class="keyword">struct</span> rq *rq)
{
	schedstat_inc(rq, sched_goidle);
	<span class="comment">/* adjust the active tasks as we might go into a long sleep */</span>
	calc_load_account_active(rq);
	<span class="keyword">return</span> rq-&gt;idle;
}
</pre></td></tr></table></figure>

<p>至此主CPU的idle进程的初始化及被调度的过程分析完毕，但从CPU的初始化过程略有不一样，后续再分析。</p>
<p>Done. ：）</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/kernel/" term="kernel"/>
    <category scheme="http://lsmushroom.github.io/categories/kernel/" term="kernel"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[shell-command-tips]]></title>
    <link href="http://lsmushroom.github.io/2014/01/02/shell-command-tips/"/>
    <id>http://lsmushroom.github.io/2014/01/02/shell-command-tips/</id>
    <published>2014-01-02T13:28:11.000Z</published>
    <updated>2014-01-26T11:13:40.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<ul>
<li><p>trap:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>trap [-lp] [[arg] sigspec <span class="keyword">...</span>]

arg: 信号处理函数，当接收到有sigspec定义的信号时将触发有args定义的命令的执行

<span class="number">1.</span> 如未指定arg或arg为<span class="string">" - "</span> ， 则当收到sigspec时将信号复位为原值
<span class="number">2.</span> 如arg指定为<span class="literal">NULL</span> ， 则sigspec指定的信号将被当前shell脚本以及触发信号的命令忽略
<span class="number">3.</span> trap -l 列出当前的信号列表
</pre></td></tr></table></figure>
</li>
<li><p>usermod</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>usermod <span class="attribute">-m</span> <span class="attribute">-d</span> <span class="variable">$NEW_HOME_PATH</span> <span class="variable">$USER</span>
将<span class="variable">$USER</span>指定的用户的home目录切换至新目录中，并将原目录中的文件移动至新目录中

ps <span class="attribute">-U</span> <span class="variable">$USER</span> <span class="attribute">-u</span> <span class="variable">$user</span>
仅显示指定用户的进程，可用于干掉死掉的终端
</pre></td></tr></table></figure>
</li>
<li><p>here document 用法 (cat &lt;&lt; EOF)<br>Here Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">cmd</span> &lt;&lt; delimiter
<span class="type">Here</span> <span class="type">Document</span> <span class="type">Content</span>
<span class="title">delimiter</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p>它的作用就是将两个 delimiter 之间的内容(Here Document Content 部分) 传递给cmd 作为输入参数，delimiter可自定义，通常可用于在脚本中动态的生成新的脚本。</p>
<p>delimiter间的内容可嵌入变量 ，其值取决于运行时的shell环境，且变量会在shell运行时被展开，重定向时会将展开后的值写入重定向文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>A=test
cat &lt;&lt; EOF &gt; output.sh
<span class="built_in">echo</span> <span class="string">"This is output"</span>
<span class="built_in">echo</span> <span class="variable">$A</span>
EOF
</pre></td></tr></table></figure>

<p>写入output.sh将是test<br>如要禁止变量展开，可以通过在起始的 delimiter的前后添加 “ 来实现，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>A=test
cat &lt;&lt; <span class="string">"EOF"</span> &gt; output.sh  <span class="comment">#注意引号</span>
<span class="built_in">echo</span> <span class="string">"hello"</span>
<span class="built_in">echo</span> <span class="variable">$A</span> 
EOF
</pre></td></tr></table></figure>

<p>写入output.sh的将是$A</p>
<p>&lt;&lt; 变为 &lt;&lt;-<br>Here Document 还有一个用法就是将 ‘«’ 变为 ‘«-‘。 使用 &lt;&lt;- 的唯一变化就是Here Document 的内容部分每行前面的 tab (制表符)将会被删除掉，这种用法是为了编写Here Document的时候可以将内容部分进行缩进，方便阅读代码。</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/shell/" term="shell"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[maven 使用]]></title>
    <link href="http://lsmushroom.github.io/2014/01/02/maven-使用/"/>
    <id>http://lsmushroom.github.io/2014/01/02/maven-使用/</id>
    <published>2014-01-02T12:27:46.000Z</published>
    <updated>2014-01-05T03:32:53.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>创建项目<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>mvn archetype:create -DgroupId=<span class="keyword">com</span><span class="preprocessor">.practise</span><span class="preprocessor">.java</span> -DartifactId=helloworld -DpackageName=<span class="keyword">com</span><span class="preprocessor">.practise</span><span class="preprocessor">.java</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p>创建后的目录结构如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>[@sohu_41_173 java-practise]$ tree helloworld/
helloworld/
├── pom<span class="preprocessor">.xml</span>
└── src
    ├── main
    │   └── java
    │       └── <span class="keyword">com</span>
    │           └── practise
    │               └── java
    │                   └── App<span class="preprocessor">.java</span>
    └── test
        └── java
            └── <span class="keyword">com</span>
                └── practise
                    └── java
                        └── AppTest<span class="preprocessor">.java</span>

<span class="number">11</span> directories, <span class="number">3</span> files
</pre></td></tr></table></figure>

<p>其中archetype:create称为一个Maven目标，archetype是一个插件标识而create是目标标识,相应的会创建一个pom.xml文件，文件中各项的含义如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="literal">-</span> <span class="comment">groupId:</span> <span class="comment">通常为项目的顶级包名。</span>
<span class="literal">-</span> <span class="comment">artifactId:</span> <span class="comment">通常为项目名</span>
<span class="literal">-</span> <span class="comment">version：项目的版本号，在开发的不同阶段，你需要更改这个版本号。</span>
<span class="literal">-</span> <span class="comment">packaging：项目发布时的打包类型。比如对于普通Java程序打包为jar文件；对于Java</span> <span class="comment">web项目则打包为war文件。</span>
<span class="literal">-</span> <span class="comment">name：通常也是项目名</span>
<span class="literal">-</span> <span class="comment">url：项目的主页。</span>
</pre></td></tr></table></figure>

<ul>
<li>安装<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">mvn</span> clean install
</pre></td></tr></table></figure>

</li>
</ul>
<p>会将由mvn package编译生成的jar包拷贝至类似如下的路径：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">/opt/home/mushroom/</span><span class="string">.</span><span class="comment">m2/repository/com/practise/java/helloworld/1</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">SNAPSHOT/helloworld</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">SNAPSHOT</span><span class="string">.</span><span class="comment">jar</span>
</pre></td></tr></table></figure>

<ul>
<li><p>清理</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="title">[</span><span class="comment">@sohu_41_173</span> <span class="comment">helloworld</span><span class="title">]</span><span class="comment">$</span> <span class="comment">mvn</span> <span class="comment">clean</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">Scanning</span> <span class="comment">for</span> <span class="comment">projects</span><span class="string">.</span><span class="string">.</span><span class="string">.</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">Building</span> <span class="comment">helloworld</span> <span class="comment">1</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">SNAPSHOT</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">maven</span><span class="literal">-</span><span class="comment">clean</span><span class="literal">-</span><span class="comment">plugin:2</span><span class="string">.</span><span class="comment">5:clean</span> <span class="comment">(default</span><span class="literal">-</span><span class="comment">clean)</span> <span class="comment">@</span> <span class="comment">helloworld</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">Deleting</span> <span class="comment">/opt/linsiyuan/git/java</span><span class="literal">-</span><span class="comment">practise/helloworld/target</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">BUILD</span> <span class="comment">SUCCESS</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">Total</span> <span class="comment">time:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">294s</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">Finished</span> <span class="comment">at:</span> <span class="comment">Fri</span> <span class="comment">Jan</span> <span class="comment">03</span> <span class="comment">10:24:04</span> <span class="comment">CST</span> <span class="comment">2014</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="comment">Final</span> <span class="comment">Memory:</span> <span class="comment">16M/963M</span>
<span class="title">[</span><span class="comment">INFO</span><span class="title">]</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
</pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>[@sohu_41_173 target]$ java -<span class="keyword">cp</span> ./helloworld-<span class="number">1.0</span>-SNAPSHOT<span class="preprocessor">.jar</span> <span class="keyword">com</span><span class="preprocessor">.practise</span><span class="preprocessor">.java</span><span class="preprocessor">.App</span>
</pre></td></tr></table></figure>

</li>
</ul>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/java/" term="java"/>
    <category scheme="http://lsmushroom.github.io/categories/java/" term="java"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[部署 Storm on Yarn]]></title>
    <link href="http://lsmushroom.github.io/2014/01/02/部署-storm-on-yarn/"/>
    <id>http://lsmushroom.github.io/2014/01/02/部署-storm-on-yarn/</id>
    <published>2014-01-02T07:44:50.000Z</published>
    <updated>2014-01-08T03:32:56.000Z</updated>
    <content type="html"><![CDATA[<p>本文基于apache hadoop2.2.0 版本部署storm-on-yarn ， 记录下将storm 部署在 Yarn 上运行的过程<br><a id="more"></a></p>
<h1 id="Precondition">Precondition</h1>
<ol>
<li>一个已部署好运行正常的yarn集群</li>
<li>一个已部署好运行正常的zookeeper集群</li>
</ol>
<h1 id="-90e8-7f72-">部署</h1>
<h2 id="-73af-5883-51c6-5907-">环境准备</h2>
<h3 id="1-_Java_7">1. Java 7</h3>
<p>Storm-on-yarn 要求其运行环境为<a href="">java 7</a> ，故需在集群内每个节点上将java版本升级为java 7</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>    <span class="title">[</span><span class="comment">root@master</span> <span class="comment">~</span><span class="title">]</span><span class="comment">#</span> <span class="comment">yum</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">install</span> <span class="comment">jdk</span><span class="literal">-</span><span class="comment">7u40</span><span class="literal">-</span><span class="comment">linux</span><span class="literal">-</span><span class="comment">x64</span><span class="string">.</span><span class="comment">rpm</span>
    <span class="title">[</span><span class="comment">root@master</span> <span class="comment">~</span><span class="title">]</span><span class="comment">#</span> <span class="comment">java</span> <span class="literal">-</span><span class="comment">version</span>
    <span class="comment">java</span> <span class="comment">version</span> <span class="comment">"1</span><span class="string">.</span><span class="comment">7</span><span class="string">.</span><span class="comment">0_40"</span>
    <span class="comment">Java(TM)</span> <span class="comment">SE</span> <span class="comment">Runtime</span> <span class="comment">Environment</span> <span class="comment">(build</span> <span class="comment">1</span><span class="string">.</span><span class="comment">7</span><span class="string">.</span><span class="comment">0_40</span><span class="literal">-</span><span class="comment">b43)</span>
    <span class="comment">Java</span> <span class="comment">HotSpot(TM)</span> <span class="comment">64</span><span class="literal">-</span><span class="comment">Bit</span> <span class="comment">Server</span> <span class="comment">VM</span> <span class="comment">(build</span> <span class="comment">24</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">b56</span><span class="string">,</span> <span class="comment">mixed</span> <span class="comment">mode)</span>
</pre></td></tr></table></figure>

<p>相应的修改JAVA_HOME环境变量</p>
<h3 id="2-_-5b89-88c5-maven">2. 安装maven</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>wget <span class="symbol">http:</span>/<span class="regexp">/mirror.symnds.com/software</span><span class="regexp">/Apache/maven</span><span class="regexp">/maven-3/</span><span class="number">3.1</span>.<span class="number">1</span>/binaries/apache-maven-<span class="number">3.1</span>.<span class="number">1</span>-bin.tar.gz
tar -zxvf apache-maven-<span class="number">3.1</span>.<span class="number">1</span>-bin.tar.gz
mv apache-maven-<span class="number">3.1</span>.<span class="number">1</span> /usr/lib/maven
export <span class="constant">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/usr/lib/maven/bin</span>
</pre></td></tr></table></figure>

<h2 id="-90e8-7f72-storm-yarn">部署storm-yarn</h2>
<h3 id="1-_-4e0b-8f7d-storm-on-yarn">1. 下载storm-on-yarn</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">wget</span> <span class="comment">https://github</span><span class="string">.</span><span class="comment">com/yahoo/storm</span><span class="literal">-</span><span class="comment">yarn/archive/master</span><span class="string">.</span><span class="comment">zip</span>
<span class="comment">unzip</span> <span class="comment">master</span><span class="string">.</span><span class="comment">zip</span>
<span class="comment">cd</span> <span class="comment">storm</span><span class="literal">-</span><span class="comment">yarn</span><span class="literal">-</span><span class="comment">master</span>
</pre></td></tr></table></figure>

<h3 id="2-_-4fee-6539-pom-xml">2. 修改pom.xml</h3>
<p>当前是基于apache hadoop2.2.0 部署storm，需相应的修改pom.xml来指明</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>    <span class="tag">&lt;<span class="title">properties</span>&gt;</span>
    <span class="tag">&lt;<span class="title">storm.version</span>&gt;</span>0.9.0-wip21<span class="tag">&lt;/<span class="title">storm.version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">hadoop.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="title">hadoop.version</span>&gt;</span>
    <span class="comment">&lt;!--hadoop.version&gt;2.1.0-beta&lt;/hadoop.version--&gt;</span>
    <span class="comment">&lt;!--hadoop.version&gt;2.1.0.2.0.5.0-67&lt;/hadoop.version--&gt;</span>
    <span class="tag">&lt;/<span class="title">properties</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="3-_-90e8-7f72-storm">3. 部署storm</h3>
<p>在storm-yarn-master目录中包含storm.zip，创建$STORM_HOME目录用以存放storm.zip ，并将其解压</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">cp</span> lib/storm<span class="preprocessor">.zip</span>  $STORM_HOME
unzip $STORM_HOME/storm<span class="preprocessor">.zip</span>
</pre></td></tr></table></figure>

<p>将storm-0.9.0-wip2 和 storm-yarn-master 的bin目录均添加至$PATH环境变量，以便后续使用storm和storm-yarn命令</p>
<p>将storm.zip文件上传至hdfs,注意此处hdfs上的路径需对应于当前的storm版本号，否则后续编译时的测试可能无法通过</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">hdfs</span> <span class="comment">dfs</span> <span class="literal">-</span><span class="comment">put</span> <span class="comment">storm</span><span class="string">.</span><span class="comment">zip</span>  <span class="comment">/lib/storm/0</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">wip2/</span>
</pre></td></tr></table></figure>

<h3 id="4-_-7f16-8bd1-storm-on-yarn">4. 编译storm-on-yarn</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">cd</span> <span class="comment">storm</span><span class="literal">-</span><span class="comment">yarn</span><span class="literal">-</span><span class="comment">master</span>
<span class="comment">mvn</span> <span class="comment">package</span>
</pre></td></tr></table></figure>

<h3 id="5-_-7f16-8f91-storm-yaml-6587-4ef6-">5. 编辑storm.yaml文件</h3>
<p>storm通过storm.yaml来指定当前集群的拓扑信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="preprocessor">#指定storm使用的zookeeper集群</span>
<span class="label">storm.zookeeper.servers:</span>
- <span class="string">"10.1.41.173"</span>
- <span class="string">"10.1.41.181"</span>
- <span class="string">"10.1.41.183"</span>
- <span class="string">"10.1.41.184"</span>

<span class="preprocessor">#指定与zookeeper通信的端口，对应zookeeper配置中的client port</span>
<span class="label">storm.zookeeper.port:</span> <span class="number">2188</span>

<span class="preprocessor">#nimbus服务器地址</span>
<span class="label">nimbus.host:</span> <span class="string">"10.1.41.181"</span>

<span class="label">master.host:</span> <span class="string">"localhost"</span>
<span class="label">master.thrift.port:</span> <span class="number">9000</span>

<span class="preprocessor">#指定初始创建的supervisor数目</span>
master<span class="preprocessor">.initial</span>-num-supervisors: <span class="number">1</span>
<span class="label">master.container.priority:</span> <span class="number">0</span>

<span class="preprocessor">#指定storm-yarn启动的AM的Container占用的内存大小</span>
master<span class="preprocessor">.container</span><span class="preprocessor">.size</span>-mb: <span class="number">4096</span>

<span class="label">master.heartbeat.interval.millis:</span> <span class="number">1000</span>
<span class="label">master.timeout.secs:</span> <span class="number">1000</span>
<span class="label">yarn.report.wait.millis:</span> <span class="number">10000</span>
<span class="label">nimbusui.startup.ms:</span> <span class="number">10000</span>

<span class="label">ui.port:</span> <span class="number">7070</span>

<span class="label">storm.messaging.transport:</span> <span class="string">"backtype.storm.messaging.netty.Context"</span>
<span class="label">storm.messaging.netty.buffer_size:</span> <span class="number">1048576</span>
<span class="label">storm.messaging.netty.max_retries:</span> <span class="number">100</span>
<span class="label">storm.messaging.netty.min_wait_ms:</span> <span class="number">1000</span>
<span class="label">storm.messaging.netty.max_wait_ms:</span> <span class="number">5000</span>
</pre></td></tr></table></figure>

<h2 id="-8fd0-884c-storm-on-yarn">运行storm-on-yarn</h2>
<p>启动storm-yarn , 在此需注意，storm-yarn本身将作为Yarn上的一个应用被提交到yarn上，在多用户的环境中将同其他的MR job一样禁止使用root账号提交，否则在slave结点将因权限问题而启动失败，但不会输出error message至命令行终端上。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">storm</span><span class="literal">-</span><span class="comment">yarn</span> <span class="comment">launch</span> <span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/storm/storm</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">wip21/conf/storm</span><span class="string">.</span><span class="comment">yaml</span>
</pre></td></tr></table></figure>

<p>可通过web页面或以下命令来确认storm-on-yarn是否启动成功</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="title">[</span><span class="comment">@master</span> <span class="comment">conf</span><span class="title">]</span><span class="comment">#</span> <span class="comment">yarn</span> <span class="comment">application</span> <span class="literal">-</span><span class="comment">list</span>
<span class="comment">14/01/02</span> <span class="comment">17:25:34</span> <span class="comment">INFO</span> <span class="comment">client</span><span class="string">.</span><span class="comment">RMProxy:</span> <span class="comment">Connecting</span> <span class="comment">to</span> <span class="comment">ResourceManager</span> <span class="comment">at</span> <span class="comment">master/10</span><span class="string">.</span><span class="comment">1</span><span class="string">.</span><span class="comment">41</span><span class="string">.</span><span class="comment">173:9080</span>
<span class="comment">Total</span> <span class="comment">number</span> <span class="comment">of</span> <span class="comment">applications</span> <span class="comment">(application</span><span class="literal">-</span><span class="comment">types:</span> <span class="title">[</span><span class="title">]</span> <span class="comment">and</span> <span class="comment">states:</span> <span class="title">[</span><span class="comment">SUBMITTED</span><span class="string">,</span> <span class="comment">ACCEPTED</span><span class="string">,</span> <span class="comment">RUNNING</span><span class="title">]</span><span class="comment">):1</span>
<span class="comment">Application</span><span class="literal">-</span><span class="comment">Id</span>      <span class="comment">Application</span><span class="literal">-</span><span class="comment">Name</span>        <span class="comment">Application</span><span class="literal">-</span><span class="comment">Type</span>          <span class="comment">User</span>           <span class="comment">Queue</span>                   <span class="comment">State</span>          <span class="comment">Final</span><span class="literal">-</span><span class="comment">State</span>              <span class="comment">Progress</span>                        <span class="comment">Tracking</span><span class="literal">-</span><span class="comment">URL</span>
<span class="comment">application_1388633522174_0003</span>         <span class="comment">Storm</span><span class="literal">-</span><span class="comment">on</span><span class="literal">-</span><span class="comment">Yarn</span>                    <span class="comment">YARN</span>     <span class="comment">yuanlinsi</span>         <span class="comment">default</span>                 <span class="comment">RUNNING</span>            <span class="comment">UNDEFINED</span>                   <span class="comment">50%</span>                                 <span class="comment">N/A</span>
</pre></td></tr></table></figure>

<p>注意storm-on-yarn的运行将占用大量的集群资源，尤其是虚拟内存，由此可能在storm-on-yarn启动后，因yarn中原有的对单个container可用内存资源上限的配置而将storm-on-yarn杀死。当前实验可暂时关闭对单个应用消耗虚拟内存的使用量, 在yarn-site.xml中添加以下配置项：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">property</span>&gt;</span>
<span class="tag">&lt;<span class="title">description</span>&gt;</span>Whether virtual memory limits will be enforced for
containers.<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
<span class="tag">&lt;<span class="title">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
<span class="tag">&lt;<span class="title">value</span>&gt;</span>false<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
</pre></td></tr></table></figure>

<p>在nimbus等启动后将输出日志至类似如下的路径,可通过观察日志了解nimbus的运行状况</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/logs/root/userlogs/root/application_1388633522174_0002/container_1388633522174_0002_01_000001</span>
<span class="title">[</span><span class="comment">@slave0</span> <span class="comment">container_1388633522174_0002_01_000001</span><span class="title">]</span><span class="comment">#</span> <span class="comment">ll</span>
<span class="comment">total</span> <span class="comment">204</span>
<span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">1</span> <span class="comment">yuanlinsi</span> <span class="comment">hadoop</span> <span class="comment">179037</span> <span class="comment">Jan</span>  <span class="comment">2</span> <span class="comment">14:16</span> <span class="comment">nimbus</span><span class="string">.</span><span class="comment">log</span>
<span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">1</span> <span class="comment">yuanlinsi</span> <span class="comment">hadoop</span>    <span class="comment">531</span> <span class="comment">Jan</span>  <span class="comment">2</span> <span class="comment">11:34</span> <span class="comment">stderr</span>
<span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">1</span> <span class="comment">yuanlinsi</span> <span class="comment">hadoop</span>  <span class="comment">17644</span> <span class="comment">Jan</span>  <span class="comment">2</span> <span class="comment">14:15</span> <span class="comment">stdout</span>
<span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">1</span> <span class="comment">yuanlinsi</span> <span class="comment">hadoop</span>   <span class="comment">1670</span> <span class="comment">Jan</span>  <span class="comment">2</span> <span class="comment">11:56</span> <span class="comment">ui</span><span class="string">.</span><span class="comment">log</span>
</pre></td></tr></table></figure>

<p>获取storm.yaml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">storm</span><span class="literal">-</span><span class="comment">yarn</span> <span class="comment">getStormConfig</span> <span class="literal">-</span><span class="comment">appId</span> <span class="comment">application_1388633522174_0002</span> <span class="literal">-</span><span class="comment">output</span> <span class="comment">~/</span><span class="string">.</span><span class="comment">storm/storm</span><span class="string">.</span><span class="comment">yaml</span>
</pre></td></tr></table></figure>

<p>由获得的storm.yaml可知当前nimbus在哪个结点并提交任务：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">storm</span> <span class="comment">jar</span> <span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/storm/storm</span><span class="literal">-</span><span class="comment">yarn</span><span class="literal">-</span><span class="comment">master/lib/storm</span><span class="literal">-</span><span class="comment">starter</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1</span><span class="literal">-</span><span class="comment">SNAPSHOT</span><span class="string">.</span><span class="comment">jar</span> <span class="comment">storm</span><span class="string">.</span><span class="comment">starter</span><span class="string">.</span><span class="comment">WordCountTopology</span> <span class="comment">WordCountTopology</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">nimbus</span><span class="string">.</span><span class="comment">host=10</span><span class="string">.</span><span class="comment">1</span><span class="string">.</span><span class="comment">41</span><span class="string">.</span><span class="comment">183</span>
</pre></td></tr></table></figure>

<p>可通过通过$nimbus.host:7070访问storm 的web UI 来监测topology的执行</p>
<p>Done. :)</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/yarn/" term="yarn"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Storm on Yarn 部署]]></title>
    <link href="http://lsmushroom.github.io/2013/12/25/storm-on-yarn-部署/"/>
    <id>http://lsmushroom.github.io/2013/12/25/storm-on-yarn-部署/</id>
    <published>2013-12-25T12:55:03.000Z</published>
    <updated>2014-01-02T09:52:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-51c6-5907-5b89-88c5-73af-5883-">准备安装环境</h2>
<ol>
<li><p>下载<a href="https://github.com/yahoo/storm-yarn/archive/master.zip" target="_blank">storm-on-yarn</a><br> wget <a href="https://github.com/yahoo/storm-yarn/archive/master.zip" target="_blank">https://github.com/yahoo/storm-yarn/archive/master.zip</a><br> 或<br> git clone git@github.com:yahoo/storm-yarn.git</p>
</li>
<li><p>创建一个目录用以存放storm相关文件<br> mkdir storm</p>
</li>
<li>将storm.zip文件拷贝至$STORM_HOME目录并解压<br> cp ./storm-yarn-master/lib/storm.zip .<br> unzip storm.zip</li>
</ol>
<h2 id="Storm_-4f9d-8d56-7684-8f6f-4ef6-73af-5883-">Storm 依赖的软件环境</h2>
<ol>
<li><a href="http://zeromq.org/area:download" target="_blank">zeromq</a></li>
<li><a href="https://github.com/nathanmarz/jzmq" target="_blank">jzmq</a></li>
<li>Java 6</li>
<li>Python</li>
</ol>
<h2 id="-6dfb-52a0-73af-5883-53d8-91cf-">添加环境变量</h2>
<p>将storm-0.9.0-wip21 和 storm-yarn-master/bin 目录至 $PATH 环境变量中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">export</span> <span class="comment">PATH=/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/storm/storm</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">wip21:/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/storm/storm</span><span class="literal">-</span><span class="comment">yarn</span><span class="literal">-</span><span class="comment">master/bin:$PATH</span>
</pre></td></tr></table></figure>

<h2 id="-7f16-8bd1-">编译</h2>
<p>进入storm-yarn-master目录，编译<br>    mvn package -DskipTests</p>
<h2 id="-90e8-7f72-zookeeper">部署zookeeper</h2>
<p>zookeeper需要投票选举，因此建议在搭建zookeeper集群时包含奇数个结点,当包含偶数个结点时，将无法处理偶数个结点同时挂掉的情况。</p>
<ol>
<li>准备Java 1.6运行环境</li>
<li>Set the Java heap size. This is very important to avoid swapping, which will seriously degrade ZooKeeper performance. To determine the correct value, use load tests, and make sure you are well below the usage limit that would cause you to swap. Be conservative - use a maximum heap size of 3GB for a 4GB machine.</li>
<li>下载<a href="http://zookeeper.apache.org/releases.html#download" target="_blank">zookeeper安装包</a></li>
<li>创建配置文件，包含以下内容,配置文件名随意,通常命名为$ZOOKEEPER_HOME/conf/zoo.cfg<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="title">tickTime</span>=<span class="number">2000</span>
<span class="title">dataDir</span>=/var/zookeeper/
<span class="title">clientPort</span>=<span class="number">2181</span>
<span class="title">initLimit</span>=<span class="number">5</span>
<span class="title">syncLimit</span>=<span class="number">2</span>
<span class="title">server</span><span class="number">.1</span>=zoo1:<span class="number">2888</span>:<span class="number">3888</span>
<span class="title">server</span><span class="number">.2</span>=zoo2:<span class="number">2888</span>:<span class="number">3888</span>
<span class="title">server</span><span class="number">.3</span>=zoo3:<span class="number">2888</span>:<span class="number">3888</span>
</pre></td></tr></table></figure>

</li>
</ol>
<p>以上配置文件主要用于zookeeper集群中各个结点了解集群内的其他结点的信息。这主要是通过配置项server.id=host:port:port</p>
<ol>
<li>将zookeeper同步至集群内的其他结点</li>
<li>在相应的结点上在$dataDir中指定的目录中创建相应的id文件，其中内容仅包含结点所对应的id信息 </li>
</ol>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/yarn/" term="yarn"/>
    <category scheme="http://lsmushroom.github.io/tags/storm/" term="storm"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Yarn 多用户权限配置]]></title>
    <link href="http://lsmushroom.github.io/2013/12/23/yarn-多用户权限配置/"/>
    <id>http://lsmushroom.github.io/2013/12/23/yarn-多用户权限配置/</id>
    <published>2013-12-23T07:32:23.000Z</published>
    <updated>2013-12-25T10:32:57.000Z</updated>
    <content type="html"><![CDATA[<p>近期将在yarn集群中添加多用户环境，修改了下集群的用户访问权限，记录下已备忘。</p>
<p><a id="more"></a></p>
<h1 id="-6e90-7801-5206-6790-">源码分析</h1>
<p>首先需清楚在yarn集群中将存在两类用户，一个是启动集群的用户，另一个是提交应用的用户。由此对于Yarn中的守护进程，如ResourceManager，NodeManager,NameNode,DataNode等将由管理员用户启动，而如MRAppMaster,YarnChild类，在多用户情景下应由提交应用的用户所启动。由此多用户将与Yarn中容器启动的过程紧密相关，在Yarn中提供两种实现方式：DefaultContainerExecutor和LinuxContainerExecutor，二者的执行逻辑很相似，主要的不同之处在于DefaultContainerExecutor将以NodeManager启动者的用户运行相应的应用，而LinuxContainerExecutor可以提交应用的用户执行，同时LinuxContainerExecutor可实现对CPU资源的控制。而LinuxContainerExecutor的执行则依赖二进制可执行程序container-executor来完成。</p>
<p>对应用程序的启动必然涉及到一个用户的切换过程，而这个操作就是由Yarn中的container-executor来完成的。<br>container-executor 所支持的命令行参数如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="title">[</span><span class="comment">@slave0</span> <span class="comment">bin</span><span class="title">]</span><span class="comment">#</span> <span class="string">.</span><span class="comment">/container</span><span class="literal">-</span><span class="comment">executor</span>
<span class="comment">Usage:</span> <span class="comment">container</span><span class="literal">-</span><span class="comment">executor</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">checksetup</span>
<span class="comment">Usage:</span> <span class="comment">container</span><span class="literal">-</span><span class="comment">executor</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mount</span><span class="literal">-</span><span class="comment">cgroups</span> <span class="comment">hierarchy</span> <span class="comment">controller=path</span><span class="string">.</span><span class="string">.</span><span class="string">.</span>
<span class="comment">Usage:</span> <span class="comment">container</span><span class="literal">-</span><span class="comment">executor</span> <span class="comment">user</span> <span class="comment">command</span> <span class="comment">command</span><span class="literal">-</span><span class="comment">args</span>
<span class="comment">Commands:</span>
<span class="comment">initialize</span> <span class="comment">container:</span>  <span class="comment">0</span> <span class="comment">appid</span> <span class="comment">tokens</span> <span class="comment">nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dirs</span> <span class="comment">nm</span><span class="literal">-</span><span class="comment">log</span><span class="literal">-</span><span class="comment">dirs</span> <span class="comment">cmd</span> <span class="comment">app</span><span class="string">.</span><span class="string">.</span><span class="string">.</span>
<span class="comment">launch</span> <span class="comment">container:</span>     <span class="comment">1</span> <span class="comment">appid</span> <span class="comment">containerid</span> <span class="comment">workdir</span> <span class="comment">container</span><span class="literal">-</span><span class="comment">script</span> <span class="comment">tokens</span> <span class="comment">pidfile</span> <span class="comment">nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dirs</span> <span class="comment">nm</span><span class="literal">-</span><span class="comment">log</span><span class="literal">-</span><span class="comment">dirs</span> <span class="comment">resources</span>
<span class="comment">signal</span> <span class="comment">container:</span>     <span class="comment">2</span> <span class="comment">container</span><span class="literal">-</span><span class="comment">pid</span> <span class="comment">signal</span>
<span class="comment">delete</span> <span class="comment">as</span> <span class="comment">user:</span>  <span class="comment">3</span> <span class="comment">relative</span><span class="literal">-</span><span class="comment">path</span>
</pre></td></tr></table></figure>

<p>通过跟踪Container启动日志可以了解其启动过程：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">2013</span><span class="literal">-</span><span class="comment">12</span><span class="literal">-</span><span class="comment">23</span> <span class="comment">19:02:21</span><span class="string">,</span><span class="comment">171</span> <span class="comment">INFO</span> <span class="comment">nodemanager</span><span class="string">.</span><span class="comment">LinuxContainerExecutor:</span> <span class="comment">initApplication:</span> <span class="title">[</span><span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/bin/container</span><span class="literal">-</span><span class="comment">executor</span><span class="string">,</span> <span class="comment">smartidc</span><span class="string">,</span> <span class="comment">0</span><span class="string">,</span> <span class="comment">application_1387731734171_0098</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir/nmPrivate/container_1387731734171_0098_01_000003</span><span class="string">.</span><span class="comment">tokens</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir</span><span class="string">,</span> <span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/logs/root/userlogs/root</span><span class="string">,</span> <span class="comment">/usr/lib/jvm/java</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">6</span><span class="string">.</span><span class="comment">0</span><span class="literal">-</span><span class="comment">sun</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">6</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">45</span><span class="string">.</span><span class="comment">x86_64/jre/bin/java</span><span class="string">,</span> <span class="literal">-</span><span class="comment">classpath</span><span class="string">,</span> <span class="string">.</span><span class="string">.</span><span class="string">.</span> <span class="string">,</span> <span class="literal">-</span><span class="comment">Djava</span><span class="string">.</span><span class="comment">library</span><span class="string">.</span><span class="comment">path=/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/lib/native</span><span class="string">,</span> <span class="comment">org</span><span class="string">.</span><span class="comment">apache</span><span class="string">.</span><span class="comment">hadoop</span><span class="string">.</span><span class="comment">yarn</span><span class="string">.</span><span class="comment">server</span><span class="string">.</span><span class="comment">nodemanager</span><span class="string">.</span><span class="comment">containermanager</span><span class="string">.</span><span class="comment">localizer</span><span class="string">.</span><span class="comment">ContainerLocalizer</span><span class="string">,</span> <span class="comment">smartidc</span><span class="string">,</span> <span class="comment">application_1387731734171_0098</span><span class="string">,</span> <span class="comment">container_1387731734171_0098_01_000003</span><span class="string">,</span> <span class="comment">slave0</span><span class="string">,</span> <span class="comment">8040</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir</span><span class="title">]</span>

<span class="comment">2013</span><span class="literal">-</span><span class="comment">12</span><span class="literal">-</span><span class="comment">23</span> <span class="comment">19:02:22</span><span class="string">,</span><span class="comment">907</span> <span class="comment">INFO</span> <span class="comment">nodemanager</span><span class="string">.</span><span class="comment">LinuxContainerExecutor:</span> <span class="comment">launchContainer:</span> <span class="title">[</span><span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/bin/container</span><span class="literal">-</span><span class="comment">executor</span><span class="string">,</span> <span class="comment">smartidc</span><span class="string">,</span> <span class="comment">1</span><span class="string">,</span> <span class="comment">application_1387731734171_0098</span><span class="string">,</span> <span class="comment">container_1387731734171_0098_01_000003</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir/usercache/smartidc/appcache/application_1387731734171_0098/container_1387731734171_0098_01_000003</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir/nmPrivate/application_1387731734171_0098/container_1387731734171_0098_01_000003/launch_container</span><span class="string">.</span><span class="comment">sh</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir/nmPrivate/application_1387731734171_0098/container_1387731734171_0098_01_000003/container_1387731734171_0098_01_000003</span><span class="string">.</span><span class="comment">tokens</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir/nmPrivate/container_1387731734171_0098_01_000003</span><span class="string">.</span><span class="comment">pid</span><span class="string">,</span> <span class="comment">/tmp/hadoop</span><span class="literal">-</span><span class="comment">root/nm</span><span class="literal">-</span><span class="comment">local</span><span class="literal">-</span><span class="comment">dir</span><span class="string">,</span> <span class="comment">/opt/linsiyuan/hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0/logs/root/userlogs/root</span><span class="string">,</span> <span class="comment">cgroups=/cgroup/cpu/yarn/container_1387731734171_0098_01_000003/tasks</span><span class="title">]</span>
</pre></td></tr></table></figure>

<p>以上两条日志记录了容器的初始化及启动命令。注意观察在可执行程序后紧跟的第一个参数即为提交应用的用户名。</p>
<p>container-executor将基于此参数设置用户的有效用户ID及组ID，但首先需结合配置文件container-executor.cfg对参数做检查，检查的标准如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="javadoc">/**
 * Is the user a real user account?
 * Checks:
 *   1. Not root
 *   2. UID is above the minimum configured.
 *   3. Not in banned user list
 * Returns NULL on failure
 */</span>
struct passwd* check_user(<span class="keyword">const</span> <span class="keyword">char</span> *user)
</pre></td></tr></table></figure>

<p>也即在使用LinuxContainerExecutor时，禁止root用户提交job，对提交job的用户uid小于container-executor.cfg中设置的最小用户id及处于黑名单中的用户同样禁止提交job</p>
<p>当提交job的用户通过检查后，最终将通过系统调用 seteuid及setegid 完成有效用户（组）ID的切换</p>
<h1 id="-914d-7f6e-">配置</h1>
<h2 id="-5207-6362-Yarn-4f7f-7528-7684-ContainerExecutor-7c7b-4e3a-LinuxContainerExecutor">切换Yarn使用的ContainerExecutor类为LinuxContainerExecutor</h2>
<p>在yarn-site.xml文件中添加以下内容并同步至集群中其他节点</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre>&lt;!--Start set the <span class="keyword">container</span>-executor to LinuxContainerExecutor--&gt;
&lt;property&gt;
&lt;description&gt;who will execute(launch) the containers.&lt;/description&gt;
&lt;name&gt;yarn.nodemanager.<span class="keyword">container</span>-executor.<span class="class"><span class="keyword">class</span>&lt;/<span class="title">name</span>&gt;
&lt;<span class="title">value</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">yarn</span>.<span class="title">server</span>.<span class="title">nodemanager</span>.<span class="title">LinuxContainerExecutor</span>&lt;/<span class="title">value</span>&gt;
&lt;/<span class="title">property</span>&gt;

&lt;<span class="title">property</span>&gt;
&lt;<span class="title">description</span>&gt;<span class="title">The</span> <span class="title">class</span> <span class="title">which</span> <span class="title">should</span> <span class="title">help</span> <span class="title">the</span> <span class="title">LCE</span> <span class="title">handle</span> <span class="title">resources</span>.&lt;/<span class="title">description</span>&gt;
&lt;<span class="title">name</span>&gt;<span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">resources</span>-<span class="title">handler</span>.<span class="title">class</span>&lt;/<span class="title">name</span>&gt;
&lt;<span class="title">value</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">yarn</span>.<span class="title">server</span>.<span class="title">nodemanager</span>.<span class="title">util</span>.<span class="title">CgroupsLCEResourcesHandler</span>&lt;/<span class="title">value</span>&gt;
&lt;/<span class="title">property</span>&gt;

&lt;<span class="title">property</span>&gt;
&lt;<span class="title">description</span>&gt;<span class="title">The</span> <span class="title">cgroups</span> <span class="title">hierarchy</span> <span class="title">under</span> <span class="title">which</span> <span class="title">to</span> <span class="title">place</span> <span class="title">YARN</span> <span class="title">proccesses</span> (<span class="title">cannot</span> <span class="title">contain</span> <span class="title">commas</span>).
<span class="title">If</span> <span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">cgroups</span>.<span class="title">mount</span> <span class="title">is</span> <span class="title">false</span> (<span class="title">that</span> <span class="title">is</span>, <span class="title">if</span> <span class="title">cgroups</span> <span class="title">have</span>
        <span class="title">been</span> <span class="title">pre</span>-<span class="title">configured</span>), <span class="title">then</span> <span class="title">this</span> <span class="title">cgroups</span> <span class="title">hierarchy</span> <span class="title">must</span> <span class="title">already</span> <span class="title">exist</span> <span class="title">and</span> <span class="title">be</span> <span class="title">writable</span> <span class="title">by</span> <span class="title">the</span>
<span class="title">NodeManager</span> <span class="title">user</span>, <span class="title">otherwise</span> <span class="title">the</span> <span class="title">NodeManager</span> <span class="title">may</span> <span class="title">fail</span>.
<span class="title">Only</span> <span class="title">used</span> <span class="title">when</span> <span class="title">the</span> <span class="title">LCE</span> <span class="title">resources</span> <span class="title">handler</span> <span class="title">is</span> <span class="title">set</span> <span class="title">to</span> <span class="title">the</span> <span class="title">CgroupsLCEResourcesHandler</span>.&lt;/<span class="title">description</span>&gt;
&lt;<span class="title">name</span>&gt;<span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">cgroups</span>.<span class="title">hierarchy</span>&lt;/<span class="title">name</span>&gt;
&lt;<span class="title">value</span>&gt;/<span class="title">yarn</span>&lt;/<span class="title">value</span>&gt;
&lt;/<span class="title">property</span>&gt;

&lt;<span class="title">property</span>&gt;
&lt;<span class="title">description</span>&gt;<span class="title">Whether</span> <span class="title">the</span> <span class="title">LCE</span> <span class="title">should</span> <span class="title">attempt</span> <span class="title">to</span> <span class="title">mount</span> <span class="title">cgroups</span> <span class="title">if</span> <span class="title">not</span> <span class="title">found</span>.
<span class="title">Only</span> <span class="title">used</span> <span class="title">when</span> <span class="title">the</span> <span class="title">LCE</span> <span class="title">resources</span> <span class="title">handler</span> <span class="title">is</span> <span class="title">set</span> <span class="title">to</span> <span class="title">the</span> <span class="title">CgroupsLCEResourcesHandler</span>.&lt;/<span class="title">description</span>&gt;
&lt;<span class="title">name</span>&gt;<span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">cgroups</span>.<span class="title">mount</span>&lt;/<span class="title">name</span>&gt;
&lt;<span class="title">value</span>&gt;<span class="title">true</span>&lt;/<span class="title">value</span>&gt;
&lt;/<span class="title">property</span>&gt;

&lt;<span class="title">property</span>&gt;
&lt;<span class="title">description</span>&gt;<span class="title">Where</span> <span class="title">the</span> <span class="title">LCE</span> <span class="title">should</span> <span class="title">attempt</span> <span class="title">to</span> <span class="title">mount</span> <span class="title">cgroups</span> <span class="title">if</span> <span class="title">not</span> <span class="title">found</span>. <span class="title">Common</span> <span class="title">locations</span>
<span class="title">include</span> /<span class="title">sys</span>/<span class="title">fs</span>/<span class="title">cgroup</span> <span class="title">and</span> /<span class="title">cgroup</span>; <span class="title">the</span> <span class="title">default</span> <span class="title">location</span> <span class="title">can</span> <span class="title">vary</span> <span class="title">depending</span> <span class="title">on</span> <span class="title">the</span> <span class="title">Linux</span>  <span class="title">distribution</span> <span class="title">in</span> <span class="title">use</span>. <span class="title">This</span> <span class="title">path</span> <span class="title">must</span> <span class="title">exist</span> <span class="title">before</span> <span class="title">the</span> <span class="title">NodeManager</span> <span class="title">is</span> <span class="title">launched</span>.
<span class="title">Only</span> <span class="title">used</span> <span class="title">when</span> <span class="title">the</span> <span class="title">LCE</span> <span class="title">resources</span> <span class="title">handler</span> <span class="title">is</span> <span class="title">set</span> <span class="title">to</span> <span class="title">the</span> <span class="title">CgroupsLCEResourcesHandler</span>, <span class="title">and</span>
<span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">cgroups</span>.<span class="title">mount</span> <span class="title">is</span> <span class="title">true</span>.&lt;/<span class="title">description</span>&gt;
&lt;<span class="title">name</span>&gt;<span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">cgroups</span>.<span class="title">mount</span>-<span class="title">path</span>&lt;/<span class="title">name</span>&gt;
&lt;<span class="title">value</span>&gt;/<span class="title">cgroup</span>&lt;/<span class="title">value</span>&gt;
&lt;/<span class="title">property</span>&gt;

&lt;<span class="title">property</span>&gt;
&lt;<span class="title">name</span>&gt;<span class="title">yarn</span>.<span class="title">nodemanager</span>.<span class="title">linux</span>-<span class="title">container</span>-<span class="title">executor</span>.<span class="title">group</span>&lt;/<span class="title">name</span>&gt;
&lt;<span class="title">value</span>&gt;<span class="title">yarn</span>&lt;/<span class="title">value</span>&gt;
&lt;<span class="title">description</span>&gt;<span class="title">your</span> <span class="title">user</span> <span class="title">group</span> <span class="title">here</span>. <span class="title">should</span> <span class="title">match</span> <span class="title">container</span>-<span class="title">executor</span>.<span class="title">cfg</span>&lt;/<span class="title">description</span>&gt;
&lt;/<span class="title">property</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="container-executor-cfg_-914d-7f6e-">container-executor.cfg 配置</h2>
<p>配置项yarn.nodemanager.linux-container-executor.group 对应yarn-site.xml中yarn.nodemanager.linux-container-executor.group,二者需保持一致<br>配置项banned.users 为黑名单<br>配置项min.user.id 指定可向集群提交job的最小用户UID，通常新增的用户的UID从500开始<br>配置项allowed.system.users 为白名单</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>[@slave0 hadoop-<span class="number">2.2</span><span class="number">.0</span>]<span class="preprocessor"># cat etc/hadoop/container-executor.cfg</span>
yarn<span class="preprocessor">.nodemanager</span><span class="preprocessor">.linux</span>-container-executor<span class="preprocessor">.group</span>=hadoop
banned<span class="preprocessor">.users</span>=<span class="preprocessor">#comma separated list of users who can not run applications</span>
min<span class="preprocessor">.user</span><span class="preprocessor">.id</span>=<span class="number">499</span>
allowed<span class="preprocessor">.system</span><span class="preprocessor">.users</span>=

<span class="preprocessor">#yarn.nodemanager.linux-container-executor.group=#configured value of yarn.nodemanager.linux-container-executor.group</span>
<span class="preprocessor">#banned.users=#comma separated list of users who can not run applications</span>
<span class="preprocessor">#min.user.id=1000#Prevent other super-users</span>
<span class="preprocessor">#allowed.system.users=##comma separated list of system users who CAN run applications</span>
</pre></td></tr></table></figure>

<h2 id="-6743-9650-8bbe-7f6e-">权限设置</h2>
<h3 id="container-executor-6743-9650-8bbe-7f6e-">container-executor权限设置</h3>
<p>container-executor可执行文件对权限及所属的用户和用户组有严格的要求,需按如下方式设置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="title">[</span><span class="comment">@slave0</span> <span class="comment">hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0</span><span class="title">]</span><span class="comment">#</span> <span class="comment">chmod</span> <span class="comment">6050</span> <span class="string">.</span><span class="comment">/container</span><span class="literal">-</span><span class="comment">executor</span>
<span class="title">[</span><span class="comment">@slave0</span> <span class="comment">hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0</span><span class="title">]</span><span class="comment">#</span> <span class="comment">chown</span> <span class="comment">root:hadoop</span> <span class="string">.</span><span class="comment">/container</span><span class="literal">-</span><span class="comment">executor</span>
<span class="title">[</span><span class="comment">@slave0</span> <span class="comment">hadoop</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">2</span><span class="string">.</span><span class="comment">0</span><span class="title">]</span><span class="comment">#</span> <span class="comment">ll</span> <span class="comment">bin/container</span><span class="literal">-</span><span class="comment">executor</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">Sr</span><span class="literal">-</span><span class="comment">s</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">1</span> <span class="comment">root</span> <span class="comment">hadoop</span> <span class="comment">101927</span> <span class="comment">Nov</span> <span class="comment">14</span> <span class="comment">17:46</span> <span class="comment">bin/container</span><span class="literal">-</span><span class="comment">executor</span>
</pre></td></tr></table></figure>

<h3 id="-24-HADOOP_HOME-2f-etc-2c-24-HADOOP_HOME-6743-9650-8bbe-7f6e-">$HADOOP_HOME/etc,$HADOOP_HOME权限设置</h3>
<p>要求etc/hadoop/container-executor.cfg , $HADOOP_HOME/etc,$HADOOP_HOME目录的所有者必须为集群的启动者</p>
<h2 id="cgroup_-9ed8-8ba4-6302-8f7d-70b9-">cgroup 默认挂载点</h2>
<p>yarn-site.xml中yarn.nodemanager.linux-container-executor.cgroups.mount-path 指定的默认挂载点要求必须存在，可在集群内每个节点上运行/etc/init.d/cgconfig restart以确保挂载点的存在</p>
<h2 id="-7528-6237-6dfb-52a0-">用户添加</h2>
<p>在集群内的每个节点上都需要新增相应的集群使用者用户账号</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/yarn/" term="yarn"/>
    <category scheme="http://lsmushroom.github.io/tags/hadoop/" term="hadoop"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hadoop 2.2.0 API CHM 版本]]></title>
    <link href="http://lsmushroom.github.io/2013/12/09/hadoop-220-api-chm-版本�/"/>
    <id>http://lsmushroom.github.io/2013/12/09/hadoop-220-api-chm-版本�/</id>
    <published>2013-12-09T06:16:29.000Z</published>
    <updated>2013-12-09T06:21:35.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<p>今天从hadoop 2.2.0 版本的源码中编译生成了相应的doc文件，做成了chm文档:<a href="http://vdisk.weibo.com/s/vt7vK_plTgAz" target="_blank">hadoop-2.2.0 api.chm</a>，以后可以离线查看了</p>
<p>:)</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/hadoop/" term="hadoop"/>
    <category scheme="http://lsmushroom.github.io/tags/yarn/" term="yarn"/>
    <category scheme="http://lsmushroom.github.io/tags/api/" term="api"/>
    <category scheme="http://lsmushroom.github.io/tags/chm/" term="chm"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Yarn 日志级别]]></title>
    <link href="http://lsmushroom.github.io/2013/12/04/yarn日志级别调整/"/>
    <id>http://lsmushroom.github.io/2013/12/04/yarn日志级别调整/</id>
    <published>2013-12-04T09:00:06.000Z</published>
    <updated>2013-12-04T09:04:55.000Z</updated>
    <content type="html"><![CDATA[<p>Yarn 中默认的日志级别为INFO，如何调整其输出日志的级别呢？</p>
<a id="more"></a>

<p>Yarn 中提供以下命令用以查看并设置集群的输出日志级别：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>[<span class="property">@sohu_41_173</span> ~]<span class="comment"># yarn  daemonlog</span>

<span class="attribute">Usage</span>: General options <span class="attribute">are</span>:
        [-getlevel &lt;<span class="attribute">host</span>:httpPort&gt; &lt;name&gt;]
        [-setlevel &lt;<span class="attribute">host</span>:httpPort&gt; &lt;name&gt; &lt;level&gt;]
</pre></td></tr></table></figure>

<p>使用”daemonlog”命令需要提供相应的”host:httpPort” 以及需要查看或修改日志级别的类的名称，而”host:httpPort”可以通过以下命令查询获得：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>[<span class="property">@sohu_41_173</span> ~]<span class="comment"># yarn node  -all -list</span>
<span class="number">13</span>/<span class="number">12</span>/<span class="number">04</span> <span class="number">15</span>:<span class="number">09</span>:<span class="number">35</span> INFO client.<span class="attribute">RMProxy</span>: Connecting to ResourceManager at master.hadoop/<span class="number">10.1</span><span class="number">.41</span><span class="number">.173</span>:<span class="number">9080</span>
Total <span class="attribute">Nodes</span>:<span class="number">3</span>
     Node-Id             Node-State Node-Http-Address       Number-<span class="keyword">of</span>-Running-Containers
<span class="attribute">slave0</span>:<span class="number">54260</span>                RUNNING       <span class="attribute">slave0</span>:<span class="number">8042</span>                                  <span class="number">1</span>
<span class="attribute">slave1</span>:<span class="number">45892</span>                RUNNING       <span class="attribute">slave1</span>:<span class="number">8042</span>                                  <span class="number">2</span>
<span class="attribute">slave2</span>:<span class="number">45410</span>                RUNNING       <span class="attribute">slave2</span>:<span class="number">8042</span>                                  <span class="number">3</span>
</pre></td></tr></table></figure>

<p>以设置YarnChild.class为例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>[@sohu_41_173 ~]# yarn  daemonlog -getlevel slave0:<span class="number">8042</span> YarnChild.<span class="class"><span class="keyword">class</span>
<span class="title">Connecting</span> <span class="title">to</span> <span class="title">http</span>://<span class="title">slave0</span>:8042/<span class="title">logLevel</span>?<span class="title">log</span>=<span class="title">YarnChild</span>.<span class="title">class</span>
<span class="title">Submitted</span> <span class="title">Log</span> <span class="title">Name</span>: <span class="title">YarnChild</span>.<span class="title">class</span>
<span class="title">Log</span> <span class="title">Class</span>: <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">logging</span>.<span class="title">impl</span>.<span class="title">Log4JLogger</span>
<span class="title">Effective</span> <span class="title">level</span>: <span class="title">INFO</span>
[@<span class="title">sohu_41_173</span> ~]# <span class="title">yarn</span>  <span class="title">daemonlog</span> -<span class="title">setlevel</span> <span class="title">slave0</span>:8042 <span class="title">YarnChild</span>.<span class="title">class</span> <span class="title">DEBUG</span>
<span class="title">Connecting</span> <span class="title">to</span> <span class="title">http</span>://<span class="title">slave0</span>:8042/<span class="title">logLevel</span>?<span class="title">log</span>=<span class="title">YarnChild</span>.<span class="title">class</span>&<span class="title">level</span>=<span class="title">DEBUG</span>
<span class="title">Submitted</span> <span class="title">Log</span> <span class="title">Name</span>: <span class="title">YarnChild</span>.<span class="title">class</span>
<span class="title">Log</span> <span class="title">Class</span>: <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">logging</span>.<span class="title">impl</span>.<span class="title">Log4JLogger</span>
<span class="title">Submitted</span> <span class="title">Level</span>: <span class="title">DEBUG</span>
<span class="title">Setting</span> <span class="title">Level</span> <span class="title">to</span> <span class="title">DEBUG</span> ...
<span class="title">Effective</span> <span class="title">level</span>: <span class="title">DEBUG</span>
[@<span class="title">sohu_41_173</span> ~]# <span class="title">yarn</span>  <span class="title">daemonlog</span> -<span class="title">getlevel</span> <span class="title">slave0</span>:8042 <span class="title">YarnChild</span>.<span class="title">class</span>
<span class="title">Connecting</span> <span class="title">to</span> <span class="title">http</span>://<span class="title">slave0</span>:8042/<span class="title">logLevel</span>?<span class="title">log</span>=<span class="title">YarnChild</span>.<span class="title">class</span>
<span class="title">Submitted</span> <span class="title">Log</span> <span class="title">Name</span>: <span class="title">YarnChild</span>.<span class="title">class</span>
<span class="title">Log</span> <span class="title">Class</span>: <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">logging</span>.<span class="title">impl</span>.<span class="title">Log4JLogger</span>
<span class="title">Effective</span> <span class="title">level</span>: <span class="title">DEBUG</span></span>
</pre></td></tr></table></figure>

<p>Done. :)</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/yarn/" term="yarn"/>
    <category scheme="http://lsmushroom.github.io/tags/hadoop/" term="hadoop"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Pig on Yarn]]></title>
    <link href="http://lsmushroom.github.io/2013/11/28/pig-on-yarn/"/>
    <id>http://lsmushroom.github.io/2013/11/28/pig-on-yarn/</id>
    <published>2013-11-28T06:52:38.000Z</published>
    <updated>2013-11-29T14:22:06.000Z</updated>
    <content type="html"><![CDATA[<p>今天尝试了下将pig部署到hadoop2.2.0版的集群上，过程相对较顺利，简单记录下。</p>
<a id="more"></a>

<h2 id="-90e8-7f72-">部署</h2>
<p>部署需要依赖ant编译工具，当前使用版本为<a href="http://archive.apache.org/dist/ant/binaries/apache-ant-1.7.1-bin.zip" target="_blank">apache-ant-1.7.1</a><br>下载 pig 最新版源码包 pig-0.12.0-src,解压后对其进行编译,当前pig适配于hadoop20与hadoop23版本，因我们需要将其部署在Yarn平台上，选取适配的目标版本为hadoop23</p>
<pre><code><span class="comment">ant</span> <span class="comment">clean</span> <span class="comment">jar</span><span class="literal">-</span><span class="comment">withouthadoop</span> <span class="literal">-</span><span class="comment">Dhadoopversion=23</span>
</code></pre><p>编译过程将下载依赖的包，比较慢。 编译完成后添加pig脚本所处的目录至 $PATH 环境变量中即完成了pig的部署。</p>
<h2 id="-6d4b-8bd5-">测试</h2>
<p>Pig-Latin 实现的wordcount:</p>
<pre><code>A = load <span class="comment">'./input.txt';</span>
B = foreach A generate flatten(TOKENIZE((chararray)$<span class="number">0</span>)) <span class="keyword">as</span> word;
C = <span class="keyword">group</span> B <span class="keyword">by</span> word;
D = foreach C generate COUNT(B), <span class="keyword">group</span>;
store D <span class="keyword">into</span> <span class="comment">'./wordcount';</span>
</code></pre><p>运行wordcout测试程序：</p>
<pre><code><span class="comment">#将输入文件上传至HDFS</span>
[<span class="variable">@sohu_41_173</span> pig-wordcount]<span class="comment">#hdfs dfs -put ./input.txt input.txt</span>

<span class="comment">#执行wordcount.pig脚本</span>
[<span class="variable">@sohu_41_173</span> pig-wordcount]<span class="comment"># pig ./wordcount.pig</span>

<span class="comment">#检查输出</span>
[<span class="variable">@sohu_41_173</span> pig-wordcount]<span class="comment"># hdfs dfs -cat wordcount/part-r-00000</span>
</code></pre><p>完成 :)</p>
]]></content>
    <category scheme="http://lsmushroom.github.io/tags/pig/" term="pig"/>
    <category scheme="http://lsmushroom.github.io/tags/yarn/" term="yarn"/>
    <category scheme="http://lsmushroom.github.io/tags/hadoop/" term="hadoop"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Cgroup Test]]></title>
    <link href="http://lsmushroom.github.io/2013/11/21/cgroup-test/"/>
    <id>http://lsmushroom.github.io/2013/11/21/cgroup-test/</id>
    <published>2013-11-21T03:55:25.000Z</published>
    <updated>2014-01-15T10:38:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Cgroup_Subsystem">Cgroup Subsystem</h1>
<hr>
<h2 id="CPU_Subsystem">CPU Subsystem</h2>
<p>创建三个cgroup，对前两组设定cpu.shares比例为1:2 ，对第三组不设定cpu.shares参数，三个cgroup内运行的进程均被限制仅能在0号核上运行，可访问内存结点为0,1</p>
<pre><code>[@sohu_41_173 ~]<span class="preprocessor"># cat /etc/cgconfig.conf</span>
mount {
    cpu     = /cgroup/cpu<span class="comment">;</span>
    cpuset  = /cgroup/cpuset<span class="comment">;</span>
    memory  = /cgroup/memory<span class="comment">;</span>
}

group test1 {
    cpuset{
        cpuset<span class="preprocessor">.cpus</span>=<span class="string">"0"</span><span class="comment">;</span>
        cpuset<span class="preprocessor">.mems</span>=<span class="string">"0,1"</span><span class="comment">;</span>
    }
    cpu{
        cpu<span class="preprocessor">.shares</span>=<span class="string">"100"</span><span class="comment">;</span>
    }
}
group test2 {
    cpuset{
        cpuset<span class="preprocessor">.cpus</span>=<span class="string">"0"</span><span class="comment">;</span>
        cpuset<span class="preprocessor">.mems</span>=<span class="string">"0,1"</span><span class="comment">;</span>
    }
    cpu{
        cpu<span class="preprocessor">.shares</span>=<span class="string">"200"</span><span class="comment">;</span>
    }
}

group test3 {
    cpuset{
        cpuset<span class="preprocessor">.cpus</span>=<span class="string">"0"</span><span class="comment">;</span>
        cpuset<span class="preprocessor">.mems</span>=<span class="string">"0,1"</span><span class="comment">;</span>
    }
}
</code></pre><p>设定cgrules.conf 如下，使用C实现的简易的压测工具stress，其被编译成单独的可执行程序，简单的复制并重命名2份供另两组使用，在启动时将由cgrulesengd自动与配置的cgroup绑定运行，受相应的subsystem控制</p>
<pre><code>[<span class="variable">@sohu_41_173</span> ~]<span class="comment"># cat /etc/cgrules.conf</span>
*<span class="symbol">:/usr/local/bin/stress</span>         cpu,cpuset              /test1
*<span class="symbol">:/usr/local/bin/stress2</span>        cpu,cpuset              /test2
*<span class="symbol">:/usr/local/bin/stress3</span>        cpuset                  /test3
</code></pre><p><em>测试一</em></p>
<pre><code>[<span class="variable">@sohu_41_173</span> ~]<span class="comment"># stress -c 1</span>
stress: info: [<span class="number">48624</span>] dispatching hogs: <span class="number">1</span> cpu, <span class="number">0</span> io, <span class="number">0</span> vm, <span class="number">0</span> hdd

[<span class="variable">@sohu_41_173</span> ~]<span class="comment"># stress2 -c 1</span>
stress2: info: [<span class="number">48632</span>] dispatching hogs: <span class="number">1</span> cpu, <span class="number">0</span> io, <span class="number">0</span> vm, <span class="number">0</span> hdd

[<span class="variable">@sohu_41_173</span> ~]<span class="comment"># top -p 48633,48625 -b</span>
top - <span class="number">12</span>:08:<span class="number">04</span> up <span class="number">9</span> days, <span class="number">16</span>:<span class="number">32</span>,  <span class="number">7</span> users,  load average: <span class="number">1.94</span>, <span class="number">1.19</span>, <span class="number">2.09</span>
Tasks:   <span class="number">2</span> total,   <span class="number">2</span> running,   <span class="number">0</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie
Cpu(<span class="keyword">s</span>):  <span class="number">0</span>.<span class="number">2</span><span class="variable">%us</span>,  <span class="number">0</span>.<span class="number">1</span><span class="variable">%sy</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%ni</span>, <span class="number">99.7</span><span class="variable">%id</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%wa</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%hi</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%si</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%st</span>
Mem:  <span class="number">65820492</span>k total, <span class="number">30009200</span>k used, <span class="number">35811292</span>k free,  <span class="number">1110200</span>k buffers
Swap:  <span class="number">4194296</span>k total,        0k used,  <span class="number">4194296</span>k free,  <span class="number">9438732</span>k cached

PID USER      PR  NI  VIRT  RES  SHR S <span class="variable">%CPU</span> <span class="variable">%MEM</span>    TIME+  COMMAND
<span class="number">48633</span> root      <span class="number">20</span>   <span class="number">0</span>  <span class="number">6516</span>  <span class="number">192</span>  <span class="number">104</span> R <span class="number">67.8</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">1</span>:<span class="number">23.57</span> stress2
<span class="number">48625</span> root      <span class="number">20</span>   <span class="number">0</span>  <span class="number">6516</span>  <span class="number">192</span>  <span class="number">104</span> R <span class="number">33.9</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">47.31</span> stress
</code></pre><p>运行stress和stress2，两个程序分别受test和test1 cpu和cpuset子系统控制，从%CPU可看出，当两个进程被限制在同一个CPU核上运行时，其占用CPU的比例符合cpu.shares所配置的1:2的比例</p>
<p><em>测试二</em><br>修改三个cgroup组cpuset配置如下：</p>
<pre><code>cpuset<span class="preprocessor">.cpus</span>=<span class="string">"0,2"</span><span class="comment">;</span>
</code></pre><p>限制三个组内运行的进程可使用的CPU核为0和2号核，重启服务以使配置生效</p>
<pre><code>[<span class="property">@sohu_41_173</span> ~]<span class="comment"># /etc/init.d/cgconfig restart</span>
Stopping cgconfig <span class="attribute">service</span>:                                 [  OK  ]
Starting cgconfig <span class="attribute">service</span>:                                 [  OK  ]
[<span class="property">@sohu_41_173</span> ~]<span class="comment"># /etc/init.d/cgred restart</span>
Stopping CGroup Rules Engine Daemon...                     [  OK  ]
Starting CGroup Rules Engine <span class="attribute">Daemon</span>:                       [  OK  ]
</code></pre><p><em>测试三</em><br>添加test3 cgroup 用以测试memory cgroup的功能:</p>
<pre><code>group test3 {
    cpuset{
        cpuset<span class="preprocessor">.cpus</span>=<span class="string">"0"</span><span class="comment">;</span>
        cpuset<span class="preprocessor">.mems</span>=<span class="string">"0,1"</span><span class="comment">;</span>
    }
    memory{
        memory<span class="preprocessor">.limit</span>_in_bytes=<span class="number">50</span>m<span class="comment">;</span>
        memory<span class="preprocessor">.memsw</span><span class="preprocessor">.limit</span>_in_bytes = <span class="number">50</span>m<span class="comment">;</span>
    }
}

cat /etc/cgrules<span class="preprocessor">.conf</span>
*:/usr/local/bin/stress3        cpuset,memory                  /test3
</code></pre><p>其中memory.limit_in_bytes用以控制组内可使用的用户态内存（包括文件缓存），有效值的可为数字加单位后缀：k/K,m/M,g/G, 未明确给出单位的默认为字节，-1表示没有内存限制。不可通过此项来限制根cgroup的内存使用量。</p>
<p>memory.memsw.limit_in_bytes 用以控制内存与swap分区的使用总量，如此项为显示的配置，则当达到memory.limit_in_bytes使用上限时，将开始消耗全局系统的swap分区，直至消耗尽全局系统的所有swap空间，进而因没有swap空间而触发OOM。配置方法同memory.limit_in_bytes，但要求在提供有效的memory.limit_in_bytes值后方可配置memory.memsw.limit_in_bytes，即使在/etc/cgconfig.conf中亦应保证memory.limit_in_bytes在前，否则配置失败。</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[vim Macro]]></title>
    <link href="http://lsmushroom.github.io/2013/11/19/vim-macro/"/>
    <id>http://lsmushroom.github.io/2013/11/19/vim-macro/</id>
    <published>2013-11-18T16:01:03.000Z</published>
    <updated>2013-11-29T14:21:51.000Z</updated>
    <content type="html"><![CDATA[<p>vim 宏提供一种将一系列的操作批量应用于多行内容上的功能<br><a id="more"></a></p>
<h2 id="-8bb0-5f55-5b8f-3a-">记录宏:</h2>
<pre><code><span class="comment">visual</span> <span class="comment">模式下q</span><span class="literal">+</span><span class="comment">'</span><span class="title">[</span><span class="comment">a</span><span class="literal">-</span><span class="comment">z</span><span class="title">]</span><span class="comment">'</span><span class="string">,</span><span class="comment">q加任意一个字母按键即开始进入宏记录模式，所记录的操作后续可使用字母引用。</span>
<span class="comment">随后进入编辑模式，输入一系列的命令，在完成输入后再按q即可完成记录</span><span class="string">,</span><span class="comment">记录被保存。</span>
</code></pre><h2 id="-5e94-7528-5b8f-ff1a-">应用宏：</h2>
<pre><code><span class="comment">@</span><span class="title">[</span><span class="comment">a</span><span class="literal">-</span><span class="comment">z</span><span class="title">]</span><span class="comment">:@</span><span class="literal">+</span><span class="comment">之前宏对应的字母即可将宏操作应用于新的记录上</span>
</code></pre><h2 id="-5347-7ea7-7248-ff1a-">升级版：</h2>
<pre><code>在.vimrc中添加以下内容，即可将<span class="variable">@q</span>操作映射为空格键。
由此在记录宏时可按如下步骤进行：
开始记录：qq
结束记录：q
应用宏：敲空格键
</code></pre><h2 id="-5c06-5b8f-5e94-7528-5728-591a-884c-4e0a-ff1a-">将宏应用在多行上：</h2>
<pre><code>可在<span class="constant">VISUAL</span>模式下选定多行，然后输入<span class="symbol">:normal</span> <span class="variable">@q</span>,即可将宏同时作用于多行
</code></pre><h2 id="-5b8f-7684-wiki">宏的wiki</h2>
<pre><code>&lt;http://vim<span class="preprocessor">.wikia</span><span class="preprocessor">.com</span>/wiki/Macros&gt;
</code></pre>]]></content>
    <category scheme="http://lsmushroom.github.io/tags/vim/" term="vim"/>
    <category scheme="http://lsmushroom.github.io/categories/vim/" term="vim"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[deploy hexo on RHEL6]]></title>
    <link href="http://lsmushroom.github.io/2013/11/18/deploy-hexo-on-rhel6/"/>
    <id>http://lsmushroom.github.io/2013/11/18/deploy-hexo-on-rhel6/</id>
    <published>2013-11-18T15:07:42.000Z</published>
    <updated>2013-12-23T07:26:43.000Z</updated>
    <content type="html"><![CDATA[<p>基于RHEL6成功部署了hexo，博客落户github了，记录下部署的过程<br><a id="more"></a></p>
<h1 id="1-_-5b89-88c5-">1. 安装</h1>
<p>hexo环境的部署将被安装至用户目录下的.nvm等目录中，故root用户安装后非root用户将因权限问题而无法使用</p>
<h2 id="1-_-4e0b-8f7d-76f8-5173-5e93-">1. 下载相关库</h2>
<pre><code>curl https://raw<span class="preprocessor">.github</span><span class="preprocessor">.com</span>/creationix/nvm/master/install<span class="preprocessor">.sh</span> | sh
完成后nvm即安装完毕，但需要断开终端重连后nvm可生效
</code></pre><h2 id="2-_-5b89-88c5-Node-js">2. 安装Node.js</h2>
<pre><code><span class="title">nvm</span> install <span class="number">0.10</span>
</code></pre><h2 id="3-_-5b89-88c5-Hexo">3. 安装Hexo</h2>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">g</span> <span class="comment">hexo</span>
</code></pre><h2 id="4-_-6dfb-52a0-76f8-5173-7684-73af-5883-53d8-91cf-81f3-bashrc-4e2d-">4. 添加相关的环境变量至.bashrc中</h2>
<pre><code><span class="keyword">export</span> PATH=~/.nvm/v0.<span class="number">10.24</span>/bin/:<span class="variable">$PATH</span>
</code></pre><h1 id="2-_-4f7f-7528-">2. 使用</h1>
<h2 id="2-1_-521d-59cb-5316-76ee-5f55-">2.1    初始化目录</h2>
<pre><code><span class="title">hexo</span> init
</code></pre><h2 id="2-2_-521b-5efa-65b0-7684-Post">2.2    创建新的Post</h2>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"My First Post"</span>
</code></pre><h2 id="2-3_-7531-markdown-6587-4ef6-751f-6210-9759-6001-html-6587-4ef6-">2.3    由markdown文件生成静态html文件</h2>
<pre><code><span class="title">hexo</span> generate
</code></pre><h2 id="2-4_-672c-5730-9884-89c8-">2.4    本地预览</h2>
<pre><code>hexo <span class="keyword">server</span>
随后即可在浏览器中预览，对应的地址为服务器的ip,默认的端口为<span class="number">4000</span>。也可通过hexo <span class="keyword">server</span> -p 选项指定监听的端口
&lt;example: <span class="number">10.1</span><span class="number">.41</span><span class="number">.173</span>:<span class="number">4000</span>
</code></pre><h2 id="2-5_-5c06-672c-5730-blog-90e8-7f72-81f3-github-5bf9-5e94-7684-4ed3-5e93-4e0a-">2.5    将本地blog部署至github对应的仓库上</h2>
<pre><code><span class="number">1</span>）编辑blog根目录下的_config<span class="preprocessor">.yml</span>，指定博客将被部署至哪
    <span class="preprocessor"># Deployment</span>
    <span class="preprocessor">## Docs: http://zespia.tw/hexo/docs/deploy.html</span>
    deploy:
      type: github  <span class="preprocessor">#指定待部署的空间的类型，当前要将blog部署至github上在此填github即可</span>
      repository: git@github<span class="preprocessor">.com</span>:lsmushroom/lsmushroom<span class="preprocessor">.github</span><span class="preprocessor">.io</span><span class="preprocessor">.git</span>  <span class="preprocessor">#给出仓库的链接</span>

<span class="number">2</span>）hexo deploy

至此已通过hexo成功部署一个基本的blog，后续即需了解如何写
</code></pre><h1 id="3-_-5199-blog">3. 写blog</h1>
<pre><code><span class="comment">3</span><span class="string">.</span><span class="comment">1</span> <span class="comment">hexo对中文输入的支持</span>
    <span class="comment">hexo要求</span><span class="string">.</span><span class="comment">md文件为utf</span><span class="literal">-</span><span class="comment">8编码，故需对文件做一些设置：</span>
<span class="comment">3</span><span class="string">.</span><span class="comment">2</span> <span class="comment">markdown语法</span>
</code></pre>]]></content>
    <category scheme="http://lsmushroom.github.io/tags/hexo/" term="hexo"/>
    <category scheme="http://lsmushroom.github.io/categories/yarn/" term="yarn"/>
  </entry>
</feed>
